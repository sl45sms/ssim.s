#defines

.equiv port, 10631  #port to listen

.equiv bufsiz, 4096    # enough for an HTTP GET request TODO check for pottencial buf overflow?

.equiv path, buf+5


.equiv fd_socket, %ebp #FD file descriptor

.equiv sockaddr_in_size, 16

#socket interface
.equiv SYS_socketcall, 102

.equiv SYS_SOCKET, 1   
.equiv SYS_BIND, 2
.equiv SYS_LISTEN, 4
.equiv SYS_ACCEPT, 5
.equiv SYS_SETSOCKOPT, 14
.equiv SYS_CONNECT, 3
.equiv SOCK_STREAM, 1                 /* stream (connection) socket	*/
.equiv SOL_SOCKET, 1
.equiv SO_REUSEADDR, 2
.equiv AF_INET, 2                    /* Internet IP (V4) Protocol 	*/
.equiv PF_INET, 2
.equiv WNOHANG, 1                /*waitpid should return immediately*/
.equiv ECHILD, 10 

#system calls
.equiv SYS_exit, 1
.equiv SYS_fork, 2
.equiv SYS_read, 3
.equiv SYS_write, 4
.equiv SYS_close, 6
.equiv SYS_waitpid, 7
.equiv SYS_alarm, 27

/**********************************************************************/
.section .rodata               #.rodata are never swapped

f1: 
     .ascii "HTTP/1.0 200\r\nContent-Type: text/html; charset=UTF-8\r\n\r\n<html><head><body>Hello!</body></head></html>" #default file to serv
.equ f1Len, . - f1

f2:
    .ascii "HTTP/1.0 200\r\nContent-Type: text/html; charset=UTF-8\r\n\r\n<html><head><body>Hi!</body></head></html>" 
.equ f2Len, . - f2

f3:
    .ascii "HTTP/1.0 200\r\nContent-Type: image/png; charset=UTF-8\r\nContent-Encoding: gzip\r\n\r\n"
    .byte 0x1F,0x8B,0x08,0x08,0xC7,0x16,0x9D,0x56,0x02,0x03,0x69,0x63,0x6F,0x6E,0x2E,0x70,0x6E,0x67,0x00,0x95,0x97,0xF5,0x53,0x14,0x0E,0xD0,0xC6,0xEF,0xE8,0x94,0x30,0x48,0x29,0x29,0xA9,0xA3,0x51,0x3A,0x0E,0xE9,0xA3,0xA5,0x51,0x1A,0x8E,0x14,0x90,0x16,0x0E,0x4F,0x1A,0x41,0x5A,0x94,0xEE,0x14,0x11,0x8E,0x4E,0xC1,0xA3,0x43,0x40,0xC0,0x03,0xA4,0x3B,0x3D,0xE2,0xE0,0x0E,0xB8,0xD7,0xEF,0xFB,0x17,0xBC,0xEF,0xEE,0x3C,0xFB,0x99,0x79,0x66,0x76,0x66,0x7F,0xD9,0x9D,0xD9,0x38,0x03,0x88,0x06,0x35,0x05,0x33,0x05,0x00,0x00,0xA0,0xD6,0xD2,0x04,0x1B,0xFD,0x23,0xEC,0x3F,0x91,0x91,0xFC,0xAB,0x7D,0x8A,0x76,0x23,0xFF,0x40,0x62,0xAF,0xA3,0x01,0x06,0xE0,0xFF,0xCB,0x82,0xCE,0xF2,0xB4,0x7F,0x0E,0xB9,0x8F,0xA6,0x85,0x1F,0x00,0x00,0x6C,0xFD,0x4F,0x40,0x75,0x7A,0x0E,0xF7,0x7F,0x26,0xA9,0xBF,0x96,0x9E,0x3A,0xE9,0x0A,0x90,0x9E,0x56,0x58,0xEE,0xC3,0x36,0x83,0x02,0x00,0x40,0x0B,0xD7,0x02,0xAB,0x98,0x04,0xA1,0x0E,0x73,0x43,0xFD,0x6D,0x4C,0x73,0x07,0x94,0xBA,0xDF,0x8C,0xB7,0xCA,0x24,0xF3,0xBA,0x59,0x62,0x39,0x72,0x51,0x99,0x0F,0x64,0x09,0xEC,0x85,0xD5,0x2D,0xCD,0x45,0x0F,0x0D,0x3C,0xB8,0x76,0x54,0x75,0xEE,0x3B,0xEE,0x5E,0x22,0x07,0xF8,0x2F,0x77,0xEC,0x67,0x2A,0xC1,0xBD,0x03,0x54,0x8A,0x8C,0x2E,0xE9,0x85,0x4F,0x04,0x8A,0x8A,0x56,0x44,0xC9,0x86,0xAB,0x67,0xCF,0xEA,0xAB,0x7A,0xE3,0x4A,0x8D,0x33,0xB8,0x84,0x35,0xE9,0x5C,0xA7,0xCF,0x52,0x16,0x43,0x4F,0x5B,0x92,0x1B,0x22,0x4E,0x35,0xBC,0x54,0x51,0x1D,0x47,0x7A,0x5E,0xA9,0x2C,0xED,0x4A,0xEE,0xB9,0xBF,0xA6,0x73,0x4F,0xDB,0x70,0x98,0xA5,0xEE,0x9B,0x85,0xEE,0xCE,0xE3,0xD6,0x15,0x9F,0x27,0xAC,0x77,0x62,0xFA,0x56,0xFF,0xAF,0x70,0x10,0xE7,0xE4,0xEB,0x8B,0xF1,0x70,0x73,0xAB,0x04,0x8C,0x23,0x66,0x45,0x28,0xFB,0x4E,0xFC,0xDD,0x0F,0x8B,0x44,0xA9,0xB6,0x2B,0xA0,0x08,0x44,0x13,0xCA,0x92,0xC5,0xDC,0xBD,0x7E,0x96,0xB7,0x06,0xE1,0x39,0x8B,0x52,0x9B,0x45,0xBD,0xB1,0x63,0x3C,0x6A,0x98,0x55,0xCC,0x86,0x94,0x37,0x0B,0xBD,0xE8,0xBA,0x26,0xE6,0x83,0x69,0xBD,0xAD,0xD2,0x76,0x71,0xD9,0x0E,0xDE,0xF5,0xC7,0xFA,0x9A,0x76,0x8E,0x5A,0xB6,0xF7,0x5B,0xBA,0x7F,0x7B,0xC6,0xB6,0xDB,0x04,0xA2,0xEA,0xD3,0x30,0x39,0x8F,0x19,0xC9,0x02,0x79,0xFB,0x13,0xF0,0xAB,0xA2,0x16,0x16,0xF4,0xCF,0xDF,0xE0,0xD9,0x4D,0xCE,0x97,0x66,0x51,0xD3,0x1A,0x6E,0x27,0xE1,0x9F,0xAB,0x2E,0x0E,0x94,0x6A,0xAB,0x96,0xD1,0x6F,0xF0,0x49,0x4E,0x23,0x99,0xAF,0x9F,0x00,0x75,0x45,0x73,0x73,0x73,0x4F,0xD5,0x37,0x48,0xE8,0x82,0x19,0x68,0xC7,0x42,0x80,0x35,0x88,0x7E,0x1A,0x76,0x67,0x7D,0x35,0xC2,0x2A,0x94,0x95,0xF4,0xD4,0x4D,0x97,0x93,0x3D,0x95,0xD4,0x76,0x5E,0xE8,0x13,0x7E,0x41,0x1C,0x54,0x3C,0xBB,0xE3,0xF5,0xAF,0x2A,0x53,0x1B,0x08,0x60,0xFD,0x78,0xAF,0x7A,0x6A,0xF7,0x6C,0xDB,0xE4,0x5C,0x4D,0x59,0xB4,0x67,0xF9,0xF7,0xDC,0xFC,0x60,0x77,0x8D,0xF5,0x53,0x5E,0xCC,0x0B,0x6B,0xAB,0x11,0x1E,0x99,0x3F,0xB1,0x88,0x0B,0x0B,0xF7,0xC3,0x73,0x06,0x1B,0xFF,0x9F,0xF0,0xB4,0xDA,0x3B,0x63,0x8E,0x52,0xE1,0xFF,0x9A,0x79,0x33,0xB4,0x15,0x4A,0xAB,0xE6,0xA8,0x1D,0xC3,0x00,0x74,0xBD,0x8C,0xD3,0xD5,0x67,0x05,0xCA,0x56,0xFA,0xA5,0xAF,0xD9,0xE4,0xA2,0xC5,0x48,0x1C,0x46,0xDD,0x90,0x1F,0x49,0x9B,0xBC,0x97,0x6F,0x8B,0xF5,0x3E,0x4B,0x9B,0xEA,0x95,0x85,0x9C,0xF1,0xD9,0x55,0xD7,0x69,0x96,0x1A,0x35,0x03,0xE7,0x36,0x42,0x8F,0xAE,0x09,0x14,0xFA,0xC4,0x56,0x7C,0xF4,0x29,0xC5,0x07,0x10,0x85,0xD5,0x3A,0x3A,0x3A,0x66,0x92,0x92,0x92,0xD6,0x9D,0xD0,0x5F,0x55,0xCF,0xB6,0x81,0x14,0xCB,0x7B,0x13,0x90,0x52,0x23,0xBD,0x47,0x62,0xB7,0x1F,0xCF,0xF2,0x2D,0x68,0xA6,0x03,0xEF,0xA6,0x5C,0x75,0x1D,0xCB,0x78,0x2C,0xB5,0x9D,0x7B,0x42,0x00,0xC4,0xDC,0xB9,0x90,0x17,0x44,0x1E,0x84,0xE3,0xFC,0x9F,0x00,0x50,0x00,0xD0,0xB1,0x99,0xDE,0x61,0x94,0xA6,0xC9,0x6B,0x09,0xCB,0xC4,0x07,0xFB,0xDE,0x78,0x2D,0x58,0x83,0x48,0x06,0xFE,0x52,0x37,0x8B,0x24,0xA4,0x04,0x38,0x24,0x32,0x3A,0x78,0xFD,0x69,0x7B,0xBD,0xAF,0x07,0x01,0x14,0x17,0x54,0x57,0xBB,0x53,0x9F,0xDC,0x2D,0x28,0x61,0xCC,0xE3,0x23,0x6E,0x74,0xC2,0x74,0x72,0x30,0x6A,0x03,0x14,0x16,0x94,0xBC,0x17,0x9A,0x0E,0xFD,0x20,0x80,0x47,0x95,0x07,0x26,0x7B,0xF2,0x74,0x57,0x8F,0x69,0x99,0x92,0x71,0x16,0x1C,0x0A,0x83,0x99,0x44,0xF4,0x3D,0x2F,0xBE,0xE1,0x41,0x95,0x15,0x2B,0x6F,0x31,0x9D,0xDE,0xE6,0xC0,0xA0,0xBC,0x18,0xB1,0xAD,0x86,0x85,0x26,0x4F,0x5C,0x2C,0x0B,0xF1,0x46,0xD6,0x62,0xB6,0x4B,0xED,0x1B,0x4D,0x70,0x59,0xE2,0xC0,0x4D,0x12,0x40,0xC3,0x4F,0xBE,0x29,0xE4,0xC8,0xFA,0x4B,0xDB,0x4D,0x40,0x19,0xC8,0x3A,0x16,0x11,0x30,0xC8,0x58,0x38,0xB1,0xDC,0xDD,0xE5,0xB9,0xD0,0x54,0x0E,0xEA,0xBA,0x5C,0xD3,0xC8,0x25,0x65,0x0C,0xAF,0x60,0x60,0x74,0x08,0xE7,0xE6,0x2A,0x4F,0xB4,0xCA,0x49,0x59,0x7F,0x45,0x99,0x09,0xDA,0x46,0xE1,0x8E,0x5D,0x66,0xD7,0x7E,0xA8,0x35,0x61,0x3D,0x46,0x8E,0xDB,0x83,0x91,0x1F,0xDB,0x03,0x0F,0xE6,0xEB,0x27,0x83,0x61,0xAB,0x8F,0x6E,0xAD,0x60,0x94,0x48,0xA9,0xA2,0x89,0xDB,0xD0,0xDD,0xF3,0x39,0xBF,0xDD,0x01,0xC5,0x80,0x45,0x56,0x00,0x17,0x78,0x78,0x04,0x37,0x46,0xBD,0x31,0xB9,0x87,0x7B,0x4A,0xE3,0x7E,0xB8,0x44,0x4D,0x4D,0xCD,0x50,0x63,0x89,0x10,0x58,0x27,0x12,0xF5,0x99,0xC4,0xC8,0x9A,0xDE,0xEC,0x80,0x97,0x94,0x62,0x9F,0x65,0x8B,0x7B,0xA2,0x60,0x69,0x2A,0x7D,0xD4,0xE4,0x31,0x62,0xE1,0x34,0xDB,0xC4,0x2A,0x5F,0xD9,0x2E,0x53,0xF7,0x09,0xB0,0xED,0xB7,0x15,0xB1,0x61,0x70,0xF2,0x9C,0x62,0x03,0x77,0xBF,0xB8,0x03,0x52,0x8A,0x33,0xF4,0x6F,0xAF,0xC5,0x7A,0x87,0x81,0xDF,0x10,0xC0,0x4D,0xF1,0xAD,0x3E,0x61,0x02,0x1F,0x77,0x65,0xDA,0x8D,0x8C,0x6E,0xF9,0xA9,0xF8,0x35,0x59,0x62,0xB2,0x18,0xAF,0x00,0x57,0xA0,0xB4,0x94,0x14,0xF1,0xDD,0xBC,0x51,0x81,0xA2,0x8A,0x88,0x48,0x31,0x67,0x9A,0xDF,0xBB,0x8B,0xAA,0x7F,0x47,0xD7,0x93,0x4F,0x4B,0x13,0x40,0xCF,0x60,0xEA,0x6A,0xAC,0x81,0xB4,0xB1,0x34,0x06,0xB6,0x96,0xA6,0x51,0x9A,0x81,0x52,0xC4,0x3C,0x3C,0x97,0x3F,0x5D,0x93,0x27,0xCA,0x4B,0xBE,0xD1,0xC3,0x9E,0x6E,0xE7,0xF4,0xB1,0x78,0x75,0x05,0x73,0xEF,0x53,0x2A,0x36,0xDA,0xFF,0x88,0x5F,0xB0,0xA6,0x9A,0x5C,0x8A,0x09,0x2F,0x9B,0x44,0x4E,0xC4,0xEC,0x70,0x10,0xEC,0x78,0xB8,0xB3,0x5C,0x2C,0x32,0x04,0x1E,0x6F,0x4D,0x9D,0xEF,0x3F,0xAE,0x1C,0xF6,0xE6,0x9A,0xB4,0x6C,0x2F,0xAC,0xAC,0xDC,0x1D,0x8F,0xB3,0x36,0x59,0x63,0xD0,0xDA,0xCF,0xE7,0xE3,0xF2,0x06,0x6D,0x48,0x61,0x8E,0x17,0x87,0xEE,0xD2,0xC8,0x2B,0xE3,0xEA,0x1D,0x5A,0xDF,0x1F,0x46,0xC6,0x7B,0x88,0x6B,0xE2,0xD2,0x63,0x08,0xB9,0x13,0x42,0x34,0x04,0x3B,0xE4,0x05,0xE7,0xA7,0xEF,0x6F,0x0C,0x55,0x66,0xEB,0x6E,0xA9,0xF5,0x98,0x41,0xA0,0xC0,0xD8,0x41,0x12,0x8A,0x9C,0x43,0xDC,0x6D,0x8C,0xD2,0xE8,0x6D,0xAE,0xDC,0xE9,0xDE,0x3E,0xBA,0x36,0xB1,0x8B,0x40,0xB4,0x4B,0x89,0x1E,0x08,0xB8,0x36,0x76,0x70,0x58,0x47,0x6E,0x8E,0x64,0x0D,0x40,0x86,0x39,0x44,0xD9,0x92,0x27,0x84,0xFC,0xF7,0x49,0x35,0x9B,0x9A,0x31,0x6D,0x17,0xE2,0xC8,0xF0,0x07,0x43,0x13,0x9E,0xB6,0x2F,0x0B,0x3C,0xDB,0xC4,0xB6,0x72,0xF9,0x6A,0x49,0x63,0xC1,0x5C,0xC7,0x8E,0x54,0xBE,0x37,0xCC,0x01,0x72,0xC7,0x6E,0x3D,0xE6,0x9B,0xA9,0xB8,0x80,0xFB,0x2A,0xDC,0xE2,0x46,0x34,0xB0,0xD8,0x0E,0x86,0x4B,0xA4,0xD6,0x36,0xD0,0xC4,0x14,0x86,0x49,0xFC,0x81,0xF0,0x64,0x4C,0xDA,0x77,0xF9,0xFB,0xCD,0x46,0xB9,0xEB,0x0A,0xEE,0x71,0x70,0x52,0x05,0x0A,0xDF,0xAE,0x14,0xAC,0x9C,0xDE,0xD1,0xDA,0x00,0x9A,0xB0,0x61,0x3D,0x71,0xA6,0xD5,0x59,0x44,0x2E,0x89,0x29,0x2D,0x68,0x59,0x45,0x15,0x8C,0x11,0xE8,0x61,0x21,0xE9,0x49,0x18,0x3B,0x18,0xED,0x76,0x3E,0xE0,0x44,0x7D,0x1F,0xAF,0x34,0xD9,0x1F,0x58,0x99,0xA0,0x14,0xBF,0x37,0x41,0x77,0x45,0x4C,0x63,0xD6,0x78,0x9D,0x41,0xAE,0x1C,0xD5,0x36,0x7F,0xC5,0x61,0x56,0x74,0xE8,0x7E,0xBC,0xE4,0xB5,0x55,0x67,0x2B,0x2E,0x1D,0x38,0x3C,0x47,0xD8,0x0F,0x4B,0xF9,0xB2,0x2F,0x52,0x5B,0xF5,0x9D,0xE6,0xAD,0xF5,0x54,0x0F,0xBC,0x2C,0x71,0xA2,0x42,0x6B,0x82,0x88,0xC8,0x49,0x78,0xD0,0x32,0xFD,0x03,0xEA,0xF2,0x01,0x38,0x42,0x35,0x1E,0x37,0x6F,0x1D,0xEC,0x88,0xA6,0x58,0x99,0xBA,0x60,0x96,0xC7,0x79,0xB9,0x46,0xD0,0x40,0xB7,0x30,0xAE,0xB7,0x29,0xCB,0x51,0x30,0x97,0x81,0x22,0xC1,0x29,0x0F,0xE2,0xED,0xCF,0xBB,0x96,0xBE,0x57,0x9B,0x1D,0x55,0x5F,0x44,0x40,0xFA,0x12,0xDE,0xBB,0x53,0x76,0x38,0xFC,0xEA,0x16,0xC5,0x78,0x05,0xB9,0x7E,0x98,0x09,0x4D,0x0B,0x51,0x86,0x0E,0xD9,0x25,0xAF,0xBB,0x7D,0x37,0x78,0x54,0x7F,0xB0,0xE4,0x68,0x3B,0x6B,0x1A,0x15,0xFF,0x02,0x70,0x0E,0x75,0x3D,0xA8,0x50,0x3F,0xC4,0xD1,0x86,0x06,0x63,0x3A,0x93,0x02,0xBF,0x92,0x26,0xAB,0x74,0xA8,0x61,0x4C,0xD2,0x87,0x2C,0x1C,0x36,0x81,0xBE,0xF7,0x95,0x27,0x5E,0x9D,0x66,0x8A,0x6C,0x1E,0xFF,0xC1,0xFD,0xE9,0x20,0x12,0x5D,0x74,0x34,0x14,0x49,0x03,0x2B,0x3E,0x78,0xF4,0x92,0xF4,0x08,0x4E,0x00,0xDE,0x53,0xDE,0x3F,0x81,0x73,0x23,0xFE,0xE6,0xBF,0x0D,0x4F,0xD3,0x10,0x88,0x30,0x0E,0x53,0x59,0x61,0xB1,0x12,0x30,0x4F,0x6B,0x49,0x42,0xF6,0xDB,0x7E,0xED,0x56,0x6E,0xB1,0xE7,0x2F,0xBC,0x99,0xF0,0x3E,0xA3,0xF9,0x31,0x49,0xBC,0x43,0xE6,0x10,0xC3,0xF9,0x20,0x7A,0x4B,0xCA,0x70,0x26,0x05,0xED,0xFB,0x5E,0xA9,0xA8,0x47,0x8A,0xA3,0xBB,0x4C,0xFA,0x56,0x6E,0xCF,0xFE,0xD8,0x39,0x37,0x13,0xD2,0x01,0x80,0x26,0x8F,0x95,0x4B,0x5F,0x98,0x1A,0xF1,0x44,0xA8,0x9C,0x3D,0x5F,0x69,0xB4,0x86,0xB4,0x87,0x3B,0x38,0xA7,0xC4,0xB2,0x32,0xC3,0xF9,0x7D,0x16,0xC7,0x59,0x34,0x89,0xAE,0x20,0xF7,0x14,0xCE,0x8D,0x86,0x34,0xBD,0x3A,0xEF,0x65,0xE0,0xB9,0xF2,0x82,0x22,0x51,0xFD,0xDD,0xBE,0xC1,0x03,0x39,0x7F,0x19,0x7A,0x3E,0x5D,0x5A,0xCC,0x20,0x8F,0x49,0x22,0xD8,0x07,0x07,0x22,0x3B,0xE8,0xD7,0x0E,0x6D,0x72,0x70,0xD5,0x36,0xAB,0x20,0xCA,0x23,0xA0,0x2F,0xD9,0x20,0xC9,0x1E,0x01,0x5A,0xE1,0x18,0x4C,0x97,0xE8,0x1F,0xED,0x33,0x7D,0x64,0x58,0x1B,0x9C,0x4B,0xD2,0x96,0xA7,0xDB,0x92,0x8C,0xBA,0xEC,0xAE,0x2F,0xBB,0x99,0xA9,0x67,0x50,0xF6,0x5C,0x63,0x85,0xAE,0x63,0xB8,0x0E,0x48,0xBE,0x0C,0x93,0x08,0x3F,0x5A,0xD3,0x7B,0x31,0x58,0x33,0xFE,0x4E,0x5E,0xEE,0x41,0x5C,0x41,0x18,0x5C,0xF9,0x61,0x21,0xC0,0x77,0xF7,0x0E,0xC9,0x82,0xEC,0x34,0x1B,0x06,0xDF,0x54,0x43,0xCB,0xDE,0x4E,0x74,0xC9,0x6F,0x9F,0x5F,0x28,0x7D,0x21,0x25,0xA2,0x35,0x2A,0xD0,0x01,0x98,0x6D,0x14,0x2E,0x12,0xB9,0x35,0x9E,0xB4,0xE9,0xC9,0x88,0x3A,0xE1,0xCA,0xD5,0x72,0xB6,0xBD,0x8A,0x4A,0x1C,0xF3,0x63,0x54,0xE4,0x65,0x7B,0xD9,0x6F,0xA3,0xB1,0xAC,0x3D,0x66,0x0C,0x68,0xBE,0xAE,0xC9,0x31,0x77,0x51,0x71,0xD9,0xD2,0x51,0x51,0x7C,0x56,0x30,0xF1,0x8D,0x37,0xFC,0xD4,0x40,0x4C,0xF5,0x08,0x69,0xF5,0xA6,0x31,0x1E,0x35,0x2F,0x1C,0x7B,0xE5,0x80,0x31,0x47,0x7C,0x75,0x27,0x67,0xBB,0xCD,0xB5,0x39,0x1B,0xCB,0x5F,0xD8,0x8A,0x63,0x26,0xDE,0xE1,0x6F,0x87,0xA5,0xC4,0xBF,0xC4,0xE5,0x91,0x05,0x7A,0x32,0x35,0xD4,0xC9,0xA7,0x73,0x86,0x45,0x07,0xD9,0xCB,0xB8,0xD3,0x57,0x6B,0xF0,0xC2,0x42,0xA4,0x66,0x78,0xFE,0xA8,0xD0,0x5E,0x93,0x6F,0xA4,0x25,0xAE,0x32,0xDF,0xE8,0x87,0xCB,0x49,0xE0,0x56,0x79,0x3F,0x0B,0xF5,0x23,0x42,0xAC,0x5B,0xB7,0x76,0x81,0x8D,0xCA,0x04,0x83,0xEA,0x44,0xFA,0x9D,0x3B,0x7E,0x87,0x9E,0x4E,0x70,0xEA,0x1B,0x8A,0x21,0x2E,0xB0,0x8C,0x21,0x4B,0x77,0xCC,0xDC,0x0F,0x97,0x2D,0x11,0x58,0xDB,0xE5,0xF2,0xF4,0xC7,0xF9,0xB8,0xBD,0x5C,0xFE,0x06,0x24,0xF6,0x71,0xED,0x77,0xA9,0xE6,0x77,0x3F,0xC7,0xDA,0x3D,0x7A,0x89,0x3E,0x04,0x52,0x15,0x44,0x21,0x90,0x2F,0x91,0xCB,0x57,0x35,0x03,0x28,0x90,0x46,0x5C,0xA0,0x78,0x5E,0x4D,0xDF,0x89,0x06,0xD4,0xC1,0x9B,0xD5,0x12,0xF0,0xBA,0x96,0xB2,0xF2,0xFD,0x72,0xCC,0x37,0xA6,0xA0,0xF3,0x20,0x45,0xBB,0xD0,0x2C,0x74,0xD9,0x67,0x09,0xF9,0x93,0xCB,0x1D,0xF0,0x4B,0x3E,0x0E,0xB2,0x51,0x53,0x22,0xCC,0x0D,0x72,0x3D,0x1E,0x74,0xC9,0xAA,0xB7,0x21,0x16,0x08,0x13,0xE7,0xF1,0x28,0x17,0x62,0x3D,0x5F,0x2B,0x34,0x56,0xEE,0x42,0x6A,0x0B,0xEF,0xE6,0x93,0xD7,0x4C,0xF3,0x73,0x7B,0x29,0x5F,0xDD,0xEB,0x0B,0x63,0xF0,0x86,0xB6,0x51,0x4F,0x30,0x70,0x29,0x32,0xB2,0x4C,0x65,0x8B,0x99,0x53,0x1E,0x86,0x33,0xB9,0x31,0x2D,0x59,0x0E,0x38,0x32,0x7F,0xC1,0xFA,0x46,0x53,0x9B,0x85,0x2E,0x7E,0x1D,0xEF,0x4B,0xE4,0x40,0xED,0xB8,0x0D,0x65,0xDE,0x56,0x87,0x84,0x0C,0x93,0xEA,0x12,0xBD,0x8F,0x04,0x84,0x80,0x69,0xF7,0x0D,0x14,0xFF,0x7A,0xAE,0x92,0x52,0x3F,0x75,0x0E,0xF3,0x48,0xAD,0xD0,0x7B,0xA5,0x9D,0x61,0x87,0x34,0x81,0x9B,0x98,0xA4,0x42,0x9C,0x62,0x11,0xDC,0xAE,0x8A,0x65,0xFD,0x37,0x8F,0x5D,0x6F,0x0B,0xCD,0x09,0x36,0xC6,0x3C,0x52,0xBE,0xAC,0x13,0x1B,0xB0,0xBC,0x88,0xE3,0xF5,0x22,0xBC,0x0D,0x68,0x11,0x1C,0x6D,0xD2,0xC8,0xF6,0xDB,0x7A,0x2C,0x24,0xFB,0xCB,0x40,0xC2,0x26,0x96,0x44,0xB5,0x46,0xED,0x4A,0x27,0x01,0xBD,0xD8,0x25,0x6D,0x2B,0xFF,0x71,0xC5,0x55,0xB4,0x8D,0x87,0xB1,0x30,0x0A,0xCB,0x1E,0xED,0x81,0x2F,0xDE,0x5C,0x98,0x23,0x9E,0xD1,0x1D,0x99,0xB8,0x54,0x88,0x0E,0x2B,0x24,0x93,0x87,0x09,0x5C,0xFB,0x24,0x6C,0x4E,0x2F,0x53,0xBA,0x79,0x8D,0x1D,0xE6,0x0C,0xEB,0xE6,0x3C,0x6D,0x78,0x24,0xA4,0xD8,0xF9,0x49,0xE2,0x16,0xE9,0xB3,0xD7,0xE8,0xA5,0xC6,0x2E,0xBF,0xF7,0xF7,0x2C,0x01,0x78,0xD0,0x3C,0xBF,0xBD,0xCE,0xDD,0x81,0xEE,0xA8,0xBA,0x5F,0x6D,0x76,0x6A,0xFE,0xE3,0x28,0x8F,0x40,0x49,0xAE,0x0C,0x4F,0xBF,0x43,0xDD,0x1A,0x32,0xAA,0x09,0xFE,0x68,0x29,0x32,0x9A,0xCB,0x29,0x64,0xB3,0x51,0xEF,0x58,0x58,0x58,0xAA,0x17,0x6C,0x9F,0xBF,0x19,0x17,0x2F,0x30,0xDA,0x45,0xD5,0xD6,0x9C,0xE1,0xD0,0x3B,0x63,0x68,0xF6,0x67,0xCB,0x66,0xD8,0x82,0x5D,0xF3,0x6F,0x9C,0x4C,0x68,0xCD,0x8B,0x7D,0xBA,0xB1,0xDE,0xD6,0x58,0x32,0xA9,0xBA,0x30,0x1E,0xD0,0xE1,0xEF,0xB4,0x65,0x83,0x49,0x46,0x88,0x1C,0xFE,0xFA,0x2D,0x33,0xDE,0x0C,0x5F,0xEE,0xD1,0x22,0xA8,0x36,0xFD,0x67,0xD1,0x21,0x81,0x7E,0xE1,0x47,0x62,0x36,0xCF,0xBF,0x59,0xD2,0x4B,0x13,0xA8,0xEA,0x2C,0x5C,0x9F,0xF8,0xE5,0xAD,0x0E,0xDD,0x64,0x06,0xC5,0x14,0x51,0xD8,0x69,0xA4,0x26,0x6E,0x64,0x84,0x18,0xAE,0xF4,0xC9,0x3F,0xBF,0x3A,0xED,0x8A,0x0A,0x7F,0x5E,0xC4,0x99,0xDA,0x0E,0x7A,0x9A,0x9A,0xB8,0xA6,0x14,0x4C,0xF4,0x11,0x52,0x44,0x99,0xF7,0xF4,0x25,0x79,0xD8,0x13,0x7A,0x38,0x98,0xA1,0x44,0x8D,0xF3,0x5E,0xDD,0xCB,0x8C,0xF9,0x94,0x77,0x9F,0x8F,0xEE,0xB4,0x86,0x56,0x3B,0xDD,0x58,0xF6,0x2D,0x3C,0x0F,0x01,0x47,0x67,0x23,0x51,0x93,0xF3,0x9A,0xFB,0x91,0x84,0x84,0xF1,0xC5,0xFE,0x1F,0x7E,0xB5,0xAB,0x48,0x6A,0x97,0x78,0x9C,0x91,0x67,0x07,0x95,0xFB,0x62,0x1E,0x8C,0x1C,0xD2,0x58,0xDD,0x7E,0x8D,0x20,0xAA,0x74,0x32,0x55,0xA5,0x7A,0xA8,0xB5,0xD9,0x63,0xC8,0xD3,0x98,0x59,0xD6,0x99,0xA9,0x56,0x3B,0x2C,0x41,0x2A,0x34,0x71,0xF0,0x7E,0x7A,0x91,0xC2,0xC6,0xD6,0x42,0x11,0x89,0xD7,0x60,0xAB,0x6C,0x79,0x33,0x79,0x4D,0x8A,0x88,0x4B,0x86,0xFF,0x49,0xD5,0xF7,0x2A,0x90,0x5D,0xD2,0x5E,0xE9,0x4B,0x37,0x52,0x93,0xE4,0x32,0xAF,0x6E,0x0C,0x50,0x16,0x70,0xA3,0x9C,0xC2,0x92,0x3A,0x1C,0x51,0xB5,0x34,0x8D,0xAF,0x7F,0x32,0xB5,0xB5,0xB5,0xE9,0x33,0xA7,0xB7,0x74,0x9D,0xAF,0x5D,0x6C,0x58,0xF2,0x5D,0xBE,0xA3,0xD3,0xE1,0xE7,0x5F,0x1C,0x87,0xFE,0x0A,0x47,0x73,0x38,0x42,0x5B,0x69,0xC1,0x0A,0xA9,0x5A,0x3A,0x42,0x74,0x53,0x19,0x0F,0x64,0x3B,0x8C,0xC4,0x53,0x4F,0xC1,0x5E,0x24,0x3F,0xDD,0x83,0x5B,0xD0,0x72,0x6A,0xBC,0x3D,0xDF,0x2C,0xBA,0x46,0x68,0x4F,0xDF,0xB4,0x65,0x4D,0xDD,0x57,0xC8,0x8B,0xD4,0xC9,0x24,0x33,0xAB,0x11,0x9D,0x11,0x66,0x89,0x10,0x6B,0x6C,0x7C,0xFC,0x39,0xF0,0xF1,0xE7,0xBC,0xAF,0xF2,0x6D,0xC6,0x6E,0x6E,0xD3,0xF6,0xD5,0x45,0xD2,0x35,0x35,0xEB,0xF5,0x8F,0x3F,0x47,0x8F,0xC1,0x2E,0xD0,0xD8,0xF1,0xE0,0xF9,0xD1,0xE4,0xC8,0x4D,0x5D,0xF1,0x71,0x0B,0x0E,0xEB,0xA0,0x32,0x9F,0x3F,0xBB,0xD1,0x73,0x22,0x0F,0x20,0x9F,0x85,0x83,0x88,0x3F,0x1D,0x7B,0x78,0x9A,0xE5,0x85,0xD9,0x5E,0xF5,0xF9,0x0D,0xE3,0x8F,0xA2,0x90,0xE5,0x42,0xA1,0x2F,0x8C,0x4C,0x12,0x9A,0x64,0xC3,0x69,0xDA,0x92,0x34,0x04,0xF0,0xE9,0x3A,0x04,0x07,0x41,0xCF,0xAB,0xF4,0xDD,0xAE,0xEF,0x56,0xCC,0x18,0x73,0xD7,0x39,0x33,0x91,0xFF,0x04,0x3C,0xF8,0x45,0xE6,0x32,0x4A,0x07,0x2D,0xEB,0x4D,0x14,0xB0,0x0B,0x90,0x32,0xC9,0x24,0x2F,0xA5,0xE3,0x8F,0x63,0xC5,0xFF,0xBD,0x6B,0x33,0x5C,0xDF,0x32,0x85,0x12,0x61,0x4D,0x7A,0x9D,0x0C,0xBD,0x60,0x7F,0xAB,0x24,0x63,0x75,0x87,0x35,0x17,0xCC,0x6E,0xDD,0x0A,0x1F,0x7E,0x3C,0xF7,0xAA,0x8E,0xEA,0xB3,0x33,0xB3,0xEC,0x49,0xA8,0xCD,0x3E,0x81,0x7C,0x04,0x61,0x95,0xB7,0x0B,0x7D,0x97,0xF1,0x49,0x89,0x5A,0x10,0x5B,0x06,0xE6,0x74,0x30,0x5D,0xC3,0x4F,0x89,0x87,0xE1,0xDF,0xB9,0x21,0xF8,0x0D,0x1B,0x94,0x4A,0xB4,0x47,0xCD,0x89,0x39,0x97,0x28,0x77,0x47,0x96,0x78,0xAF,0xAD,0xEE,0xD6,0x5F,0x4B,0xA6,0xD1,0xFC,0xDB,0x4F,0xC3,0x53,0xE0,0x87,0x40,0xE0,0xB4,0x4D,0x27,0x83,0x7A,0x43,0x04,0xED,0x01,0x76,0x15,0x8B,0xFD,0x4E,0xB6,0xB2,0xC9,0x58,0xF8,0x6E,0xEA,0xA2,0xB9,0x00,0xDB,0x3B,0xF4,0x40,0x88,0x42,0xDB,0xB4,0xAD,0x3D,0x85,0xD1,0x30,0x91,0x0E,0xDC,0x16,0xF3,0x4A,0x41,0xAB,0x27,0x9D,0x7C,0xE7,0x64,0x38,0xFE,0xA6,0x58,0x3E,0xBA,0x3E,0x7F,0xB3,0xB0,0x6A,0x40,0xC3,0x8C,0xBD,0xD8,0x49,0xEF,0x5A,0x88,0xCA,0x5B,0x3D,0x98,0xF2,0xEE,0x99,0x6F,0x8C,0x35,0x99,0xA4,0x9E,0xFA,0xFC,0x78,0x22,0x34,0xB9,0x52,0xCA,0x38,0xFB,0xA9,0xE9,0x47,0x59,0xE2,0x61,0x9D,0x36,0x89,0x97,0x43,0x92,0x8D,0xAF,0xF9,0x63,0x16,0xD2,0x8B,0x63,0xDA,0x5D,0x9F,0x4E,0x42,0xB8,0xA8,0xD0,0x7A,0x88,0x24,0x29,0xA6,0x74,0x3C,0x52,0xE2,0xC5,0x6A,0x21,0xBA,0xEC,0xBB,0x64,0xAC,0x2A,0x1A,0xDB,0x4F,0x2F,0xE4,0x4D,0xDC,0x99,0x5A,0xB8,0x3C,0x20,0x7A,0xA4,0xDB,0x20,0x06,0xC9,0x96,0xCB,0x20,0x6E,0x88,0x22,0x6E,0xA0,0x3E,0x75,0x21,0x3F,0x75,0x66,0xDE,0xD2,0x65,0xE0,0x02,0xB2,0x42,0x4D,0xF3,0x94,0x4A,0xAE,0x5B,0x7F,0xA3,0xAD,0x1B,0xD0,0xDB,0xF0,0xCC,0xAD,0x6D,0x07,0x56,0xCD,0x4C,0x3B,0xA7,0xEF,0xDD,0x6A,0x38,0x21,0x1F,0x06,0x24,0x5E,0x84,0x26,0xE3,0x08,0xB4,0x11,0x45,0xC9,0xF2,0x5B,0x49,0xD2,0x89,0xE1,0x2B,0xE5,0xE5,0xBD,0x2C,0x44,0x5E,0xF4,0xF9,0xF3,0xE2,0x1A,0x12,0xE8,0xEE,0x2D,0xF6,0xA6,0x5F,0xEA,0xA1,0xA0,0x23,0xAA,0x5D,0xD3,0x3F,0x73,0x6A,0xF6,0x0B,0x6B,0x1C,0x39,0xDD,0x8B,0x5D,0x5D,0x81,0x3C,0x3E,0x6E,0xD9,0x0C,0xB5,0x5A,0x6D,0x77,0x82,0xB5,0x87,0xDA,0x2E,0x59,0x45,0x36,0x36,0xE6,0x12,0x4E,0x45,0x6C,0x4F,0x49,0xB0,0x12,0x33,0x61,0xF9,0x1A,0x23,0x32,0xF0,0x44,0x2D,0xA4,0x5D,0x98,0x2D,0x5D,0x03,0x44,0x47,0xCB,0xBF,0x06,0xDC,0xF7,0xAB,0xA2,0x95,0xF6,0x67,0x29,0x15,0x3A,0x09,0x5F,0x5F,0x22,0x74,0x50,0x00,0x36,0x36,0xC9,0x64,0x81,0x54,0xBE,0x2B,0x68,0x4B,0xD5,0x9C,0x51,0x23,0x9A,0x62,0x2A,0x40,0x64,0x64,0x32,0x36,0xF2,0x0A,0x0D,0x25,0x4E,0x6E,0x99,0x25,0x61,0x1E,0xB1,0x01,0xA5,0x0B,0xD1,0x1C,0x29,0x68,0x5C,0xB0,0x01,0xF2,0x7A,0x8C,0xF3,0xEE,0x69,0x52,0x81,0x8C,0x2B,0xD3,0x6E,0xBF,0xBB,0xA1,0x88,0x6A,0x8B,0x28,0x8B,0x66,0x12,0x8E,0x46,0xD8,0xC4,0x79,0x8D,0x11,0x41,0x16,0xCF,0xD5,0x7F,0x1D,0xFF,0x2A,0x00,0x43,0x91,0x02,0xE7,0xD8,0x0A,0x2D,0x71,0xB9,0xE6,0xDB,0xCC,0xD0,0x5B,0x14,0x5C,0xC7,0x22,0xB6,0xB8,0x82,0xB5,0xD2,0x29,0xB2,0x10,0xC2,0x1C,0x6D,0x98,0x43,0xC7,0xAA,0x71,0x64,0xA6,0x70,0x7F,0xE6,0xC4,0x00,0x56,0x1D,0x13,0x70,0x62,0xB8,0xFA,0x5A,0xC5,0x87,0xB6,0x68,0x6C,0x29,0x3A,0xB9,0x0B,0x50,0xB6,0x0F,0x18,0x18,0xCF,0x19,0xE9,0xF4,0x26,0xE7,0x5B,0x4B,0x89,0xE7,0x6E,0xE7,0x1B,0x06,0x05,0x65,0xD2,0xCC,0x2C,0x6B,0xF1,0xD7,0xA9,0x9C,0xD0,0x85,0xC9,0xBA,0x40,0xF8,0xAE,0xE2,0x5B,0xDF,0x4D,0x43,0x35,0xCD,0xC6,0x9F,0x95,0x8F,0x72,0x19,0xCB,0x52,0xB2,0xE4,0xDE,0x29,0x8B,0xBD,0x6B,0xC4,0x79,0x29,0x46,0x66,0xC9,0xF9,0x64,0xD1,0xF3,0x60,0xB0,0xF7,0xE8,0xDB,0xED,0xA2,0xAC,0x21,0x12,0xC4,0x05,0x74,0xCC,0x1E,0x3B,0xED,0x18,0xB4,0x2F,0x68,0x3F,0x7D,0x2F,0x39,0x10,0x2B,0x8D,0x27,0xEF,0x93,0x98,0xAF,0xE1,0x27,0xCA,0xD7,0xA5,0xE5,0x91,0xF0,0x93,0xCD,0xDE,0x83,0x4E,0x19,0x97,0xD3,0x65,0x9A,0xD9,0x8D,0x54,0x91,0x8D,0x08,0xD4,0x97,0xDE,0x9F,0xD7,0x7C,0x6C,0x4F,0xA0,0xBA,0x4C,0x5A,0xE7,0x53,0x1F,0x5D,0xD2,0x5B,0x72,0x4F,0x8B,0xC2,0x96,0x82,0x9B,0xDC,0x56,0xA3,0xD9,0xAE,0xF3,0xF9,0xC9,0x02,0x87,0x2B,0x21,0x08,0x92,0xB4,0x9F,0x62,0x75,0x72,0x35,0xDB,0xBF,0xA5,0x1E,0xFF,0x1E,0x33,0xD7,0x4D,0xB0,0x11,0x46,0x94,0x6F,0x40,0x48,0xC4,0x0E,0x8F,0xC8,0x01,0xD4,0xF8,0x67,0xC1,0x93,0xA1,0xF9,0xBE,0xD8,0x74,0x0C,0x2B,0x48,0x71,0xD7,0x95,0xC9,0x88,0x5E,0x1D,0x4E,0xF6,0xFC,0x0D,0x58,0xBE,0x3F,0x20,0x9F,0x52,0xF1,0x12,0x68,0x47,0xBB,0xC2,0xD3,0x5B,0x11,0x83,0x00,0xA6,0x8A,0x7D,0x6C,0xCC,0xEA,0x8C,0x89,0xC9,0x3A,0x9B,0x54,0x9C,0x03,0x81,0xB5,0xAD,0x5B,0x3F,0xC9,0xED,0x45,0x1C,0x10,0xF9,0x70,0xCD,0x85,0x87,0x13,0x43,0x19,0xCE,0x98,0x3B,0xEB,0x00,0x5F,0x81,0x7B,0x57,0x37,0x44,0x00,0x95,0xBA,0x9F,0x38,0x8A,0x97,0x5F,0xD1,0x77,0x89,0x09,0x15,0x35,0x27,0xA4,0xF4,0xF9,0x8F,0x15,0x9A,0x3F,0x10,0xB4,0x24,0xBC,0x3F,0x3F,0xFE,0xB8,0x53,0x25,0x32,0xCE,0x9E,0x18,0xAB,0xBB,0x14,0x87,0x38,0x84,0x83,0x8D,0xA2,0x7E,0x06,0x76,0x6F,0x36,0xA2,0x7D,0x95,0x65,0x0F,0x7E,0x3C,0x5B,0xF2,0x62,0x2B,0x6F,0xB8,0x86,0xFF,0x30,0xF8,0xF5,0xE3,0x31,0x2C,0x02,0xEF,0x9A,0x6A,0x34,0x0D,0x9B,0xDB,0xB6,0x52,0x75,0xFE,0x50,0x2E,0x32,0xD3,0xB5,0xD1,0xAA,0xE4,0x7B,0x01,0xC8,0xF2,0x9B,0xC3,0x06,0xF0,0xC1,0x38,0xD5,0x0D,0xD8,0xD5,0xC6,0x9C,0xDF,0x69,0x5D,0xA5,0xD5,0xC0,0x4F,0xDC,0x57,0xEC,0xA5,0x67,0xD9,0x45,0x32,0x49,0x05,0x8E,0xD8,0xDF,0xA3,0xCC,0x23,0x3E,0xEA,0xEE,0xC2,0x39,0x96,0x8E,0xFB,0x0D,0x05,0x5B,0x5B,0x4F,0xF3,0x7C,0xC7,0x8E,0x2F,0x73,0x16,0xF1,0xFC,0xD8,0xEB,0x7B,0x59,0xF7,0xD2,0xFE,0x26,0xC8,0x90,0xC9,0xA7,0xBC,0x3E,0xA7,0x2B,0xF3,0x03,0x16,0x76,0xB4,0xC9,0xC0,0xA6,0x3D,0x44,0x79,0xB1,0xBE,0xA2,0x81,0xD6,0xAD,0x97,0xE6,0x0F,0x0B,0x72,0x80,0x49,0x59,0x07,0x5D,0x24,0x37,0x04,0x4A,0x43,0x24,0x11,0x7C,0x24,0xF1,0xAE,0x5F,0x7A,0x35,0x59,0x04,0xD8,0x57,0x93,0x58,0x8E,0x05,0x86,0x17,0x67,0x4A,0x68,0x7B,0xD2,0xAC,0x54,0x3F,0x35,0xC9,0x0F,0xB4,0x0A,0x26,0x73,0x8A,0x93,0x16,0x72,0xEF,0x77,0x52,0xBD,0x55,0xF9,0xFB,0xE1,0x20,0xDC,0xBB,0x95,0xCA,0x48,0x71,0xF2,0xEF,0x54,0xC3,0xF1,0x39,0xDB,0x1C,0xE6,0x72,0x7D,0xB8,0xF4,0x78,0x39,0xE6,0x7B,0x51,0x18,0x29,0xF9,0xAC,0xEF,0x40,0xF4,0xC3,0x1F,0x96,0x88,0xB4,0xE3,0xB9,0xBE,0xE5,0x88,0x50,0x00,0xE9,0x38,0xA9,0x05,0x30,0x3D,0x92,0x64,0x80,0xFA,0xB0,0xB1,0xF9,0x7C,0xCB,0x50,0x44,0x91,0x6A,0x12,0x1B,0x9A,0xE4,0x02,0x2B,0x5C,0x5B,0x61,0xEB,0xE1,0xBA,0xA6,0x1A,0xD9,0x6E,0x2D,0x0E,0x37,0xAB,0x37,0xDB,0xDE,0xB8,0xB9,0xBA,0x0C,0x9C,0xCD,0xA2,0xB5,0x63,0xB2,0x07,0xF5,0x7F,0xDA,0x03,0x52,0x7F,0x4A,0x03,0x84,0x50,0x7F,0x82,0x03,0x4A,0xF4,0x83,0x95,0x80,0x8D,0x40,0x25,0x12,0x2F,0x27,0x87,0x1B,0xE3,0xB4,0x52,0x66,0xBE,0x3A,0x40,0x48,0x45,0x9D,0x8C,0x64,0x68,0x79,0x9A,0x16,0x48,0x6D,0xB4,0xBA,0xBD,0xF3,0x7B,0x0B,0x79,0xC1,0xC3,0xF9,0x77,0x83,0x0A,0xE9,0xA6,0x8B,0x13,0x73,0x4A,0x7F,0x9E,0xFE,0xAE,0xF2,0x46,0x53,0xAE,0x04,0x89,0x5D,0x4A,0x86,0x52,0x0E,0xCD,0x37,0x88,0x61,0xB5,0x85,0x28,0x69,0xB5,0x29,0x78,0x01,0x29,0x54,0xCF,0x23,0x92,0x4F,0xAC,0x4C,0x9A,0x3E,0xCC,0x92,0x74,0x99,0x29,0x55,0xC6,0x54,0x46,0xD8,0x10,0xEC,0xC8,0x84,0xB4,0x0C,0x38,0x60,0xD3,0xFC,0x0C,0x6D,0x23,0x4B,0x49,0xD4,0xA8,0x87,0x85,0xD2,0xA1,0x93,0xD0,0xC4,0xF4,0x42,0x23,0x0A,0xCB,0x94,0x87,0x6C,0x65,0xA2,0xFE,0x40,0x1B,0x7E,0xE1,0x1E,0xC3,0xF4,0x2C,0xDA,0x0B,0x4E,0xF9,0xF7,0x5D,0x8D,0x59,0xEF,0x59,0xA6,0xFF,0x7F,0x8F,0xFC,0xFF,0xE2,0x6E,0x2F,0x9E,0xB0,0x2A,0xCA,0x74,0xCF,0x69,0xF1,0x8E,0x33,0xE0,0x5F,0x68,0xA9,0x43,0xC0,0x5F,0x54,0x5F,0xBE,0xFD,0x1F,0xBD,0x1F,0x37,0x51,0xF6,0x10,0x00,0x00
.equ f3Len, . - f3

err403:
    .ascii "HTTP/1.0 403\r\nContent-Type: text/html; charset=UTF-8\r\n\r\n<html><head><body>not found</body></head></html>" 
.equ err403Len, . - err403

ico: #file can be binary
    .ascii "HTTP/1.0 200\r\nContent-Type: image/x-icon; charset=UTF-8\r\n\r\n"
    .byte 0x00,0x00,0x01,0x00,0x01,0x00,0x10,0x10,0x10,0x00,0x01,0x00,0x04,0x00,0x28,0x01,0x00,0x00,0x16,0x00,0x00,0x00,0x28,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x01,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x84,0x00,0x00,0xF2,0xF7,0xF3,0x00,0x00,0xFF,0x22,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x22,0x22,0x00,0x00,0x00,0x00,0x00,0x02,0x44,0x44,0x20,0x00,0x00,0x00,0x00,0x24,0x44,0x44,0x42,0x00,0x00,0x00,0x02,0x44,0x33,0x34,0x44,0x20,0x00,0x00,0x24,0x44,0x33,0x33,0x44,0x42,0x00,0x00,0x24,0x44,0x44,0x33,0x44,0x42,0x00,0x00,0x24,0x44,0x33,0x33,0x44,0x42,0x00,0x00,0x24,0x44,0x33,0x31,0x44,0x42,0x00,0x00,0x24,0x44,0x33,0x44,0x44,0x42,0x00,0x00,0x24,0x44,0x33,0x33,0x44,0x42,0x00,0x00,0x24,0x44,0x43,0x33,0x44,0x42,0x00,0x00,0x02,0x24,0x44,0x44,0x42,0x20,0x00,0x00,0x00,0x02,0x22,0x22,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0xFF,0xFF,0x00,0x00,0xFC,0x3F,0x00,0x00,0xF8,0x1F,0x00,0x00,0xF0,0x0F,0x00,0x00,0xE0,0x07,0x00,0x00,0xC0,0x03,0x00,0x00,0xC0,0x03,0x00,0x00,0xC0,0x03,0x00,0x00,0xC0,0x03,0x00,0x00,0xC0,0x03,0x00,0x00,0xC0,0x03,0x00,0x00,0xC0,0x03,0x00,0x00,0xE0,0x07,0x00,0x00,0xF8,0x1F,0x00,0x00,0xFF,0xFF,0x00,0x00
.equ icoLen, . - ico

#paths   
paths:
   .int 10                    #size of index.html
   .ascii "index.html"        #filename must be absolute path
   .int  f1                   #pointer to file 
   .int f1Len                 #length of file
   .int 7
   .ascii "hi.html"
   .int f2
   .int f2Len 
   .int 12
   .ascii  "sub/test.png"
   .int f3
   .int f3Len
   .int 11
   .ascii  "favicon.ico"
   .int ico
   .int icoLen
   .int 0
   .ascii "end"

#error's
err_accept:
	.ascii "Error 1: at accept";
#... TODO other errors

#TODO err 500 etc...

.data
socket_args:
	.int PF_INET                                              /*IPV4*/
	.int SOCK_STREAM        /*two-way, connection-based byte streams*/
	.int 0 
   
setsockopt_args:
	.int  0
	.int  SOL_SOCKET
	.int  SO_REUSEADDR
	.int optval                                /* pointer to optval */
	.int  4                                     /* sizeof socklen_t */

addr:   
	.short AF_INET                                             /*IPV4*/
	.byte port>>8,port & 0xff
	.int 0                                    /* INADDR_ANY: 0.0.0.0 */
	
bind_args:
	.int 0
	.int addr
	.int sockaddr_in_size                     /* socket address size */
      
listen_args:
	.int 0
	.int 5 #max
	
accept_args:
	.int 0
	.int sockaddr
	.int sockaddr_size     

optval:
	.int 1

available_connections:
	.int 2048


/******************************************************************************/       
.bss
sockaddr:
	.fill sockaddr_in_size, 1,0

sockaddr_size:
	.int 0

clientsock:
	.int 0

bufp:   .int 0
buf:    .fill bufsiz, 1, 0

pathLen: .int 0


/******************************************************************************/
.text

.weak _start #compile without libs

_start:
	.globl main
  
main:

	#open socket sys_socket(int family, int type, int protocol)  
	mov $socket_args,%ecx      #pointer to syscall function args
	mov $SYS_SOCKET,%ebx       #function
	mov $SYS_socketcall,%eax   #call sys_socket
	int $0x80                  #eax contains FD  
	cmp $0, %eax               #if something wrong
	jl exit
 
	mov %eax,fd_socket         #save file (socket) descriptor for later 
 
	#reuse address (ie multicast for UDP ie for TCP reuse port immediately after closing it)
	#sys_setsockopt(int fd, int level, int optname, char *optval, int optlen)
	mov fd_socket,(setsockopt_args)
	mov $setsockopt_args, %ecx
	mov $SYS_SETSOCKOPT,%ebx
	mov $SYS_socketcall,%eax
	int $0x80
	cmp $0, %eax
	jl exit

	#bind to socket  sys_bind(int fd, struct sockaddr *umyaddr, int addrlen)
	mov fd_socket, (bind_args)
	mov $bind_args,%ecx
	mov $SYS_BIND,%ebx
	mov $SYS_socketcall,%eax
	int $0x80
	cmp $0, %eax
	jl exit
 
	#listen sys_listen(int fd, int backlog)
	mov fd_socket,(listen_args)
	mov $listen_args,%ecx
	mov $SYS_LISTEN,%ebx
	mov $SYS_socketcall,%eax
	int $0x80
	cmp $0, %eax
	jl exit

#accept sys_accept(int fd, struct sockaddr *upeer_sockaddr, int *upeer_addrlen) 
accept_loop:
	mov fd_socket, (accept_args)
	mov $accept_args,%ecx
	mov $SYS_ACCEPT,%ebx
	mov $SYS_socketcall,%eax
	int $0x80
	mov %eax, (clientsock)
	cmp $0, %eax  
	jnl reap_zombies
	nop # TODO on failure, complain.
	jmp accept_loop

#
reap_zombies:
	xor %edx, %edx
	cmpl $0, (available_connections)
	jz noconnections
	mov $WNOHANG, %edx
noconnections:
	mov $0,%ecx
	mov $0,%ebx
	mov $SYS_waitpid,%eax
	int $0x80  

	cmp $0, %eax
	jz nozombies                 # WNOHANG not have to wait and no zombies ready for reaping
	jl complain                  # TODO error report
	incl (available_connections) # We reaped a zombie.
	jmp reap_zombies
        
complain:
	cmp $-ECHILD, %eax
	je nozombies   # apocalipse not now
	nop            #TODO complain waitpid
nozombies:
	jmp fork
	nop

#
fork:
	mov $SYS_fork,%eax
	int $0x80   
	cmp $0, %eax
	jg closefork
	jz continuefork 
complainfork:       
	nop                                     /* TODO complain parent have an error */
closefork:
	mov (clientsock),%ebx
	mov $SYS_close,%eax
	int $0x80  
	decl (available_connections)
	jmp accept_loop
continuefork:
	mov (clientsock), fd_socket

setalarm:
	mov $SYS_alarm, %eax                  /* cloce child after 32 sec */
	mov $32,%ebx                          /* if not respont */ 
	int $0x80
	
	/**************************************/
	/*  read client and select "file"     */
	/**************************************/

readreq:
	movl $0, (bufp)
keepread:	
	mov (bufp), %eax
	mov $bufsiz-1, %edx
	sub %eax, %edx                    /* calculate remaining space */
	add $buf, %eax
read:       
	mov %edx,%edx
	mov %eax,%ecx
	mov fd_socket,%ebx
	mov $SYS_read, %eax
	int $0x80
	cmp $0, %eax
	jnl noreaderr
readerr:                 
	mov fd_socket,%ebx
	mov $SYS_close,%eax
	int $0x80
	nop                        #TODO report error
	jmp accept_loop

noreaderr:
	je donereading             #eof
	add (bufp), %eax 
	mov %eax, (bufp)
	mov $('\r | '\n << 8 | '\r << 16 | '\n << 24), %eax  #check crlf
	mov $buf, %esi
	mov (bufp), %ecx
	sub $3, %ecx
	jle keepread
	
allign:
	cmp (%esi), %eax
	je donereading
	inc %esi
	loop allign 
	jmp keepread

donereading:

	#scan path
	cmp $5, (bufp)
	jl badreq                    #path too short 

    #print headers to stdout
	#mov $SYS_write, %eax         /* use the write syscall*/
	#mov $1, %ebx                 /* write to stdout */
	#mov $buf, %ecx
	#mov $bufsiz, %edx
	#int $0x80

 	xor %eax, %eax
	mov $0x20, %al          #look for space 
	mov $buf+5, %edi        #ignore GET
	sub %ecx, %ecx
	not %ecx 
	cld                     #look forward
	repne scasb
	test %ecx, %ecx         #test if %eax is 0       
	jz badreq
	not %ecx
	dec %ecx                # %ecx contains the length 
	mov %ecx,(pathLen)
       
	#print path to stdout
	#mov $SYS_write, %eax                     /* use the write syscall*/
	#mov $1, %ebx                             /* write to stdout */
	#mov (pathLen), %edx                      /* length */
	#mov $path, %ecx                          /* path string */
	#int $0x80

    /****************************************
     * Search for file on paths list        *
     ****************************************/
	mov $0,%ebx              #%ebx is offset for file name
	
searchFile:

	mov (pathLen),%ecx       # to mikos tou path  
 
	mov paths(,%ebx,1),%edx # to proto int sto paths einai to length tou string apo kato
	cmp $0,%edx             # an to length einai 0 eimaste sto telos tis listas 
	jz notfound             # jmp to 403 error

	cmp %edx, %ecx          # sigrine to mikos tou path me auto sthn lista 
	jne noequal             # an oxi pigene sto parakato  

	mov $path,%esi          #compare path with first file       

#   mov $paths,%edi        #einai to path +enan integer 
#   add $4,%edi

	mov $paths,%edi
	add %ebx,%edi
	add $4,%edi

	mov (pathLen),%ecx       #length   TODO auto mallon den xriazete edo afou to ekana set epano
	cld
	repe  cmpsb
	jecxz  equal             #jump when ecx is zero

noequal:

	add $4,%ebx       #to length
	add %edx,%ebx     #to mikos tou string
	add $4,%ebx       #o pointer sto file
	add $4,%ebx       #to megethos tou file   
        
jmp searchFile
        
notfound:  
   mov $err403, %ecx          
   mov $err403Len, %edx      
   jmp resetalarm

equal:
   
   add $4,%ebx                #size of int 
   add (pathLen),%ebx         #length of path

#TODO pos kano combine header kai file?

   mov paths(,%ebx,1), %ecx    #fX      
   add $4,%ebx
   mov paths(,%ebx,1), %edx    #fXlen   

   jmp resetalarm   

resetalarm:
	mov $SYS_alarm, %eax                  /*reset alarm*/
	mov $0,%ebx
	int $0x80 
	jmp write
	nop
write:  
	mov $SYS_write, %eax                     /* use the write syscall*/
	mov fd_socket, %ebx                        /* write to fd_socket */    
	int $0x80
	jmp ok
ok:     
	mov $SYS_close, %eax
	mov fd_socket, %ebx
	int $0x80
	mov $0,%eax
	jmp exit
badreq:
	mov $SYS_close, %eax
	mov fd_socket, %ebx
	int $0x80
	mov $1,%eax                           /*TODO send 404 error*/
exit:
	mov %eax,%ebx		                           /* exitcode */
	neg %ebx
	mov $SYS_exit,%eax 
	int $0x80

.end
